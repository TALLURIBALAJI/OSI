import io
import csv
import logging
from datetime import datetime
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT

logger = logging.getLogger(__name__)

class ExportHandler:
    """Handle PDF and CSV export functionality"""
    
    def __init__(self):
        self.name = "Export Handler"
    
    def generate_pdf(self, results_data, query=""):
        """Generate PDF report from search results"""
        try:
            buffer = io.BytesIO()
            
            # Create the PDF document
            doc = SimpleDocTemplate(
                buffer,
                pagesize=A4,
                rightMargin=72,
                leftMargin=72,
                topMargin=72,
                bottomMargin=18
            )
            
            # Get styles
            styles = getSampleStyleSheet()
            
            # Custom styles
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Heading1'],
                fontSize=24,
                spaceAfter=30,
                alignment=TA_CENTER,
                textColor=colors.HexColor('#2c3e50')
            )
            
            heading_style = ParagraphStyle(
                'CustomHeading',
                parent=styles['Heading2'],
                fontSize=14,
                spaceAfter=12,
                textColor=colors.HexColor('#34495e')
            )
            
            # Build the document content
            story = []
            
            # Title
            story.append(Paragraph("OSINT Framework Portal Report", title_style))
            story.append(Spacer(1, 12))
            
            # Report info
            report_info = [
                ["Report Generated:", datetime.now().strftime("%Y-%m-%d %H:%M:%S")],
                ["Search Query:", query or "N/A"],
                ["Total Results:", str(len(results_data))]
            ]
            
            info_table = Table(report_info, colWidths=[2*inch, 4*inch])
            info_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#ecf0f1')),
                ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(info_table)
            story.append(Spacer(1, 20))
            
            # Results
            story.append(Paragraph("Search Results", heading_style))
            story.append(Spacer(1, 12))
            
            for i, result in enumerate(results_data, 1):
                # Result header
                platform = result.get('platform', 'Unknown')
                status = result.get('status', 'unknown')
                
                result_title = f"{i}. {platform} - {status.title()}"
                story.append(Paragraph(result_title, styles['Heading3']))
                story.append(Spacer(1, 6))
                
                # Result details
                details = result.get('details', {})
                if details:
                    detail_data = []
                    for key, value in details.items():
                        detail_data.append([str(key), str(value)])
                    
                    if detail_data:
                        detail_table = Table(detail_data, colWidths=[2*inch, 4*inch])
                        detail_table.setStyle(TableStyle([
                            ('BACKGROUND', (0, 0), (0, -1), colors.HexColor('#bdc3c7')),
                            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                            ('FONTSIZE', (0, 0), (-1, -1), 9),
                            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
                            ('GRID', (0, 0), (-1, -1), 1, colors.black)
                        ]))
                        
                        story.append(detail_table)
                
                story.append(Spacer(1, 15))
            
            # Footer
            story.append(Spacer(1, 30))
            footer_text = "Generated by OSINT Framework Portal - For authorized use only"
            story.append(Paragraph(footer_text, styles['Normal']))
            
            # Build PDF
            doc.build(story)
            
            buffer.seek(0)
            return buffer
            
        except Exception as e:
            logger.error(f"PDF generation error: {str(e)}")
            raise
    
    def generate_csv(self, results_data, query=""):
        """Generate CSV export from search results"""
        try:
            buffer = io.StringIO()
            writer = csv.writer(buffer)
            
            # Write headers
            writer.writerow([
                'Platform',
                'Status',
                'Field',
                'Value',
                'Query',
                'Timestamp'
            ])
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Write data
            for result in results_data:
                platform = result.get('platform', 'Unknown')
                status = result.get('status', 'unknown')
                details = result.get('details', {})
                
                if details:
                    for key, value in details.items():
                        writer.writerow([
                            platform,
                            status,
                            str(key),
                            str(value),
                            query,
                            timestamp
                        ])
                else:
                    # Write row even if no details
                    writer.writerow([
                        platform,
                        status,
                        'Status',
                        status,
                        query,
                        timestamp
                    ])
            
            # Convert to bytes buffer
            csv_content = buffer.getvalue()
            buffer.close()
            
            bytes_buffer = io.BytesIO(csv_content.encode('utf-8'))
            bytes_buffer.seek(0)
            
            return bytes_buffer
            
        except Exception as e:
            logger.error(f"CSV generation error: {str(e)}")
            raise
    
    def flatten_results_for_export(self, results_data):
        """Flatten nested results data for easier export"""
        flattened = []
        
        for result in results_data:
            platform = result.get('platform', 'Unknown')
            status = result.get('status', 'unknown')
            details = result.get('details', {})
            
            base_row = {
                'platform': platform,
                'status': status
            }
            
            # Flatten details
            for key, value in details.items():
                base_row[f"detail_{key.lower().replace(' ', '_')}"] = str(value)
            
            flattened.append(base_row)
        
        return flattened